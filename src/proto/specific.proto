syntax = "proto3";

package penumbra.client.specific;

import "src/proto/crypto.proto";
import "src/proto/chain.proto";
import "src/proto/stake.proto";
import "src/proto/proofs.proto";

// Methods for accessing chain state that are "specific" in the sense that they
// request specific portions of the chain state that could reveal private
// client data.  For instance, requesting all asset denominations is oblivious,
// but requesting the asset denomination for a specific asset id is not, because
// it reveals that the client has an interest in that asset specifically.
service SpecificQuery {
  rpc TransactionByNote(crypto.NoteCommitment) returns (chain.NoteSource);
  rpc ValidatorStatus(ValidatorStatusRequest) returns (stake.ValidatorStatus);
  rpc NextValidatorRate(crypto.IdentityKey) returns (stake.RateData);

  // General-purpose key-value state query API, that can be used to query
  // arbitrary keys in the JMT storage.
  rpc KeyValue(KeyValueRequest) returns (KeyValueResponse);
}

message ValidatorStatusRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  crypto.IdentityKey identity_key = 2;
}

// Performs a key-value query, either by key or by key hash.
//
// Proofs are only supported by key.
message KeyValueRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // If set, the key to fetch from storage.
  bytes key = 2;
  // whether to return a proof
  bool proof = 3;
}

message KeyValueResponse {
  bytes value = 1;

  .ics23.CommitmentProof proof = 2;
}
