// source: src/proto/stake.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var src_proto_crypto_pb = require('../../src/proto/crypto_pb.js');
goog.object.extend(proto, src_proto_crypto_pb);
goog.exportSymbol('proto.penumbra.stake.BaseRateData', null, global);
goog.exportSymbol('proto.penumbra.stake.BondingState', null, global);
goog.exportSymbol('proto.penumbra.stake.BondingState.BondingStateEnum', null, global);
goog.exportSymbol('proto.penumbra.stake.CommissionAmount', null, global);
goog.exportSymbol('proto.penumbra.stake.CommissionAmounts', null, global);
goog.exportSymbol('proto.penumbra.stake.CurrentConsensusKeys', null, global);
goog.exportSymbol('proto.penumbra.stake.Delegate', null, global);
goog.exportSymbol('proto.penumbra.stake.DelegationChanges', null, global);
goog.exportSymbol('proto.penumbra.stake.FundingStream', null, global);
goog.exportSymbol('proto.penumbra.stake.RateData', null, global);
goog.exportSymbol('proto.penumbra.stake.Undelegate', null, global);
goog.exportSymbol('proto.penumbra.stake.Uptime', null, global);
goog.exportSymbol('proto.penumbra.stake.Validator', null, global);
goog.exportSymbol('proto.penumbra.stake.ValidatorDefinition', null, global);
goog.exportSymbol('proto.penumbra.stake.ValidatorInfo', null, global);
goog.exportSymbol('proto.penumbra.stake.ValidatorList', null, global);
goog.exportSymbol('proto.penumbra.stake.ValidatorState', null, global);
goog.exportSymbol('proto.penumbra.stake.ValidatorState.ValidatorStateEnum', null, global);
goog.exportSymbol('proto.penumbra.stake.ValidatorStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.stake.Validator.repeatedFields_, null);
};
goog.inherits(proto.penumbra.stake.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.Validator.displayName = 'proto.penumbra.stake.Validator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.ValidatorList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.stake.ValidatorList.repeatedFields_, null);
};
goog.inherits(proto.penumbra.stake.ValidatorList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.ValidatorList.displayName = 'proto.penumbra.stake.ValidatorList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.FundingStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.FundingStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.FundingStream.displayName = 'proto.penumbra.stake.FundingStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.RateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.RateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.RateData.displayName = 'proto.penumbra.stake.RateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.BaseRateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.BaseRateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.BaseRateData.displayName = 'proto.penumbra.stake.BaseRateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.ValidatorStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.ValidatorStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.ValidatorStatus.displayName = 'proto.penumbra.stake.ValidatorStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.BondingState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.BondingState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.BondingState.displayName = 'proto.penumbra.stake.BondingState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.ValidatorState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.ValidatorState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.ValidatorState.displayName = 'proto.penumbra.stake.ValidatorState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.ValidatorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.ValidatorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.ValidatorInfo.displayName = 'proto.penumbra.stake.ValidatorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.ValidatorDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.ValidatorDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.ValidatorDefinition.displayName = 'proto.penumbra.stake.ValidatorDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.Delegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.Delegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.Delegate.displayName = 'proto.penumbra.stake.Delegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.Undelegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.Undelegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.Undelegate.displayName = 'proto.penumbra.stake.Undelegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.CommissionAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.CommissionAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.CommissionAmount.displayName = 'proto.penumbra.stake.CommissionAmount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.CommissionAmounts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.stake.CommissionAmounts.repeatedFields_, null);
};
goog.inherits(proto.penumbra.stake.CommissionAmounts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.CommissionAmounts.displayName = 'proto.penumbra.stake.CommissionAmounts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.DelegationChanges = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.stake.DelegationChanges.repeatedFields_, null);
};
goog.inherits(proto.penumbra.stake.DelegationChanges, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.DelegationChanges.displayName = 'proto.penumbra.stake.DelegationChanges';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.Uptime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.stake.Uptime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.Uptime.displayName = 'proto.penumbra.stake.Uptime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.stake.CurrentConsensusKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.stake.CurrentConsensusKeys.repeatedFields_, null);
};
goog.inherits(proto.penumbra.stake.CurrentConsensusKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.stake.CurrentConsensusKeys.displayName = 'proto.penumbra.stake.CurrentConsensusKeys';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.stake.Validator.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.Validator.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.Validator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.Validator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.Validator.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityKey: (f = msg.getIdentityKey()) && src_proto_crypto_pb.IdentityKey.toObject(includeInstance, f),
    consensusKey: msg.getConsensusKey_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    website: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    fundingStreamsList: jspb.Message.toObjectList(msg.getFundingStreamsList(),
    proto.penumbra.stake.FundingStream.toObject, includeInstance),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 7, 0),
    governanceKey: (f = msg.getGovernanceKey()) && src_proto_crypto_pb.GovernanceKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.Validator}
 */
proto.penumbra.stake.Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.Validator;
  return proto.penumbra.stake.Validator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.Validator}
 */
proto.penumbra.stake.Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_proto_crypto_pb.IdentityKey;
      reader.readMessage(value,src_proto_crypto_pb.IdentityKey.deserializeBinaryFromReader);
      msg.setIdentityKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebsite(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 6:
      var value = new proto.penumbra.stake.FundingStream;
      reader.readMessage(value,proto.penumbra.stake.FundingStream.deserializeBinaryFromReader);
      msg.addFundingStreams(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequenceNumber(value);
      break;
    case 9:
      var value = new src_proto_crypto_pb.GovernanceKey;
      reader.readMessage(value,src_proto_crypto_pb.GovernanceKey.deserializeBinaryFromReader);
      msg.setGovernanceKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.Validator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.Validator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.Validator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_proto_crypto_pb.IdentityKey.serializeBinaryToWriter
    );
  }
  f = message.getConsensusKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWebsite();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getFundingStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.penumbra.stake.FundingStream.serializeBinaryToWriter
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getGovernanceKey();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      src_proto_crypto_pb.GovernanceKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.crypto.IdentityKey identity_key = 1;
 * @return {?proto.penumbra.crypto.IdentityKey}
 */
proto.penumbra.stake.Validator.prototype.getIdentityKey = function() {
  return /** @type{?proto.penumbra.crypto.IdentityKey} */ (
    jspb.Message.getWrapperField(this, src_proto_crypto_pb.IdentityKey, 1));
};


/**
 * @param {?proto.penumbra.crypto.IdentityKey|undefined} value
 * @return {!proto.penumbra.stake.Validator} returns this
*/
proto.penumbra.stake.Validator.prototype.setIdentityKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.Validator} returns this
 */
proto.penumbra.stake.Validator.prototype.clearIdentityKey = function() {
  return this.setIdentityKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.Validator.prototype.hasIdentityKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes consensus_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.stake.Validator.prototype.getConsensusKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes consensus_key = 2;
 * This is a type-conversion wrapper around `getConsensusKey()`
 * @return {string}
 */
proto.penumbra.stake.Validator.prototype.getConsensusKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusKey()));
};


/**
 * optional bytes consensus_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusKey()`
 * @return {!Uint8Array}
 */
proto.penumbra.stake.Validator.prototype.getConsensusKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.stake.Validator} returns this
 */
proto.penumbra.stake.Validator.prototype.setConsensusKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.penumbra.stake.Validator.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.stake.Validator} returns this
 */
proto.penumbra.stake.Validator.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string website = 4;
 * @return {string}
 */
proto.penumbra.stake.Validator.prototype.getWebsite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.stake.Validator} returns this
 */
proto.penumbra.stake.Validator.prototype.setWebsite = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.penumbra.stake.Validator.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.stake.Validator} returns this
 */
proto.penumbra.stake.Validator.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool enabled = 8;
 * @return {boolean}
 */
proto.penumbra.stake.Validator.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.penumbra.stake.Validator} returns this
 */
proto.penumbra.stake.Validator.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated FundingStream funding_streams = 6;
 * @return {!Array<!proto.penumbra.stake.FundingStream>}
 */
proto.penumbra.stake.Validator.prototype.getFundingStreamsList = function() {
  return /** @type{!Array<!proto.penumbra.stake.FundingStream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.stake.FundingStream, 6));
};


/**
 * @param {!Array<!proto.penumbra.stake.FundingStream>} value
 * @return {!proto.penumbra.stake.Validator} returns this
*/
proto.penumbra.stake.Validator.prototype.setFundingStreamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.penumbra.stake.FundingStream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.stake.FundingStream}
 */
proto.penumbra.stake.Validator.prototype.addFundingStreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.penumbra.stake.FundingStream, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.stake.Validator} returns this
 */
proto.penumbra.stake.Validator.prototype.clearFundingStreamsList = function() {
  return this.setFundingStreamsList([]);
};


/**
 * optional uint32 sequence_number = 7;
 * @return {number}
 */
proto.penumbra.stake.Validator.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.Validator} returns this
 */
proto.penumbra.stake.Validator.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional penumbra.crypto.GovernanceKey governance_key = 9;
 * @return {?proto.penumbra.crypto.GovernanceKey}
 */
proto.penumbra.stake.Validator.prototype.getGovernanceKey = function() {
  return /** @type{?proto.penumbra.crypto.GovernanceKey} */ (
    jspb.Message.getWrapperField(this, src_proto_crypto_pb.GovernanceKey, 9));
};


/**
 * @param {?proto.penumbra.crypto.GovernanceKey|undefined} value
 * @return {!proto.penumbra.stake.Validator} returns this
*/
proto.penumbra.stake.Validator.prototype.setGovernanceKey = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.Validator} returns this
 */
proto.penumbra.stake.Validator.prototype.clearGovernanceKey = function() {
  return this.setGovernanceKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.Validator.prototype.hasGovernanceKey = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.stake.ValidatorList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.ValidatorList.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.ValidatorList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.ValidatorList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorList.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorKeysList: jspb.Message.toObjectList(msg.getValidatorKeysList(),
    src_proto_crypto_pb.IdentityKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.ValidatorList}
 */
proto.penumbra.stake.ValidatorList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.ValidatorList;
  return proto.penumbra.stake.ValidatorList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.ValidatorList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.ValidatorList}
 */
proto.penumbra.stake.ValidatorList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_proto_crypto_pb.IdentityKey;
      reader.readMessage(value,src_proto_crypto_pb.IdentityKey.deserializeBinaryFromReader);
      msg.addValidatorKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.ValidatorList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.ValidatorList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.ValidatorList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      src_proto_crypto_pb.IdentityKey.serializeBinaryToWriter
    );
  }
};


/**
 * repeated penumbra.crypto.IdentityKey validator_keys = 1;
 * @return {!Array<!proto.penumbra.crypto.IdentityKey>}
 */
proto.penumbra.stake.ValidatorList.prototype.getValidatorKeysList = function() {
  return /** @type{!Array<!proto.penumbra.crypto.IdentityKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, src_proto_crypto_pb.IdentityKey, 1));
};


/**
 * @param {!Array<!proto.penumbra.crypto.IdentityKey>} value
 * @return {!proto.penumbra.stake.ValidatorList} returns this
*/
proto.penumbra.stake.ValidatorList.prototype.setValidatorKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.penumbra.crypto.IdentityKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.crypto.IdentityKey}
 */
proto.penumbra.stake.ValidatorList.prototype.addValidatorKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.penumbra.crypto.IdentityKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.stake.ValidatorList} returns this
 */
proto.penumbra.stake.ValidatorList.prototype.clearValidatorKeysList = function() {
  return this.setValidatorKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.FundingStream.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.FundingStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.FundingStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.FundingStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rateBps: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.FundingStream}
 */
proto.penumbra.stake.FundingStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.FundingStream;
  return proto.penumbra.stake.FundingStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.FundingStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.FundingStream}
 */
proto.penumbra.stake.FundingStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRateBps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.FundingStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.FundingStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.FundingStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.FundingStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRateBps();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.penumbra.stake.FundingStream.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.stake.FundingStream} returns this
 */
proto.penumbra.stake.FundingStream.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 rate_bps = 2;
 * @return {number}
 */
proto.penumbra.stake.FundingStream.prototype.getRateBps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.FundingStream} returns this
 */
proto.penumbra.stake.FundingStream.prototype.setRateBps = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.RateData.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.RateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.RateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.RateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityKey: (f = msg.getIdentityKey()) && src_proto_crypto_pb.IdentityKey.toObject(includeInstance, f),
    epochIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    validatorRewardRate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    validatorExchangeRate: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.RateData}
 */
proto.penumbra.stake.RateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.RateData;
  return proto.penumbra.stake.RateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.RateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.RateData}
 */
proto.penumbra.stake.RateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_proto_crypto_pb.IdentityKey;
      reader.readMessage(value,src_proto_crypto_pb.IdentityKey.deserializeBinaryFromReader);
      msg.setIdentityKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochIndex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidatorRewardRate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidatorExchangeRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.RateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.RateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.RateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.RateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_proto_crypto_pb.IdentityKey.serializeBinaryToWriter
    );
  }
  f = message.getEpochIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getValidatorRewardRate();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getValidatorExchangeRate();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional penumbra.crypto.IdentityKey identity_key = 1;
 * @return {?proto.penumbra.crypto.IdentityKey}
 */
proto.penumbra.stake.RateData.prototype.getIdentityKey = function() {
  return /** @type{?proto.penumbra.crypto.IdentityKey} */ (
    jspb.Message.getWrapperField(this, src_proto_crypto_pb.IdentityKey, 1));
};


/**
 * @param {?proto.penumbra.crypto.IdentityKey|undefined} value
 * @return {!proto.penumbra.stake.RateData} returns this
*/
proto.penumbra.stake.RateData.prototype.setIdentityKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.RateData} returns this
 */
proto.penumbra.stake.RateData.prototype.clearIdentityKey = function() {
  return this.setIdentityKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.RateData.prototype.hasIdentityKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 epoch_index = 2;
 * @return {number}
 */
proto.penumbra.stake.RateData.prototype.getEpochIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.RateData} returns this
 */
proto.penumbra.stake.RateData.prototype.setEpochIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 validator_reward_rate = 4;
 * @return {number}
 */
proto.penumbra.stake.RateData.prototype.getValidatorRewardRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.RateData} returns this
 */
proto.penumbra.stake.RateData.prototype.setValidatorRewardRate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 validator_exchange_rate = 5;
 * @return {number}
 */
proto.penumbra.stake.RateData.prototype.getValidatorExchangeRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.RateData} returns this
 */
proto.penumbra.stake.RateData.prototype.setValidatorExchangeRate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.BaseRateData.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.BaseRateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.BaseRateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.BaseRateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    epochIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    baseRewardRate: jspb.Message.getFieldWithDefault(msg, 2, 0),
    baseExchangeRate: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.BaseRateData}
 */
proto.penumbra.stake.BaseRateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.BaseRateData;
  return proto.penumbra.stake.BaseRateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.BaseRateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.BaseRateData}
 */
proto.penumbra.stake.BaseRateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBaseRewardRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBaseExchangeRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.BaseRateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.BaseRateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.BaseRateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.BaseRateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpochIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBaseRewardRate();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBaseExchangeRate();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 epoch_index = 1;
 * @return {number}
 */
proto.penumbra.stake.BaseRateData.prototype.getEpochIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.BaseRateData} returns this
 */
proto.penumbra.stake.BaseRateData.prototype.setEpochIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 base_reward_rate = 2;
 * @return {number}
 */
proto.penumbra.stake.BaseRateData.prototype.getBaseRewardRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.BaseRateData} returns this
 */
proto.penumbra.stake.BaseRateData.prototype.setBaseRewardRate = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 base_exchange_rate = 3;
 * @return {number}
 */
proto.penumbra.stake.BaseRateData.prototype.getBaseExchangeRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.BaseRateData} returns this
 */
proto.penumbra.stake.BaseRateData.prototype.setBaseExchangeRate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.ValidatorStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.ValidatorStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.ValidatorStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityKey: (f = msg.getIdentityKey()) && src_proto_crypto_pb.IdentityKey.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.penumbra.stake.ValidatorState.toObject(includeInstance, f),
    votingPower: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bondingState: (f = msg.getBondingState()) && proto.penumbra.stake.BondingState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.ValidatorStatus}
 */
proto.penumbra.stake.ValidatorStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.ValidatorStatus;
  return proto.penumbra.stake.ValidatorStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.ValidatorStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.ValidatorStatus}
 */
proto.penumbra.stake.ValidatorStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_proto_crypto_pb.IdentityKey;
      reader.readMessage(value,src_proto_crypto_pb.IdentityKey.deserializeBinaryFromReader);
      msg.setIdentityKey(value);
      break;
    case 2:
      var value = new proto.penumbra.stake.ValidatorState;
      reader.readMessage(value,proto.penumbra.stake.ValidatorState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVotingPower(value);
      break;
    case 4:
      var value = new proto.penumbra.stake.BondingState;
      reader.readMessage(value,proto.penumbra.stake.BondingState.deserializeBinaryFromReader);
      msg.setBondingState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.ValidatorStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.ValidatorStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.ValidatorStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_proto_crypto_pb.IdentityKey.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.stake.ValidatorState.serializeBinaryToWriter
    );
  }
  f = message.getVotingPower();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBondingState();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.penumbra.stake.BondingState.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.crypto.IdentityKey identity_key = 1;
 * @return {?proto.penumbra.crypto.IdentityKey}
 */
proto.penumbra.stake.ValidatorStatus.prototype.getIdentityKey = function() {
  return /** @type{?proto.penumbra.crypto.IdentityKey} */ (
    jspb.Message.getWrapperField(this, src_proto_crypto_pb.IdentityKey, 1));
};


/**
 * @param {?proto.penumbra.crypto.IdentityKey|undefined} value
 * @return {!proto.penumbra.stake.ValidatorStatus} returns this
*/
proto.penumbra.stake.ValidatorStatus.prototype.setIdentityKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.ValidatorStatus} returns this
 */
proto.penumbra.stake.ValidatorStatus.prototype.clearIdentityKey = function() {
  return this.setIdentityKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.ValidatorStatus.prototype.hasIdentityKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ValidatorState state = 2;
 * @return {?proto.penumbra.stake.ValidatorState}
 */
proto.penumbra.stake.ValidatorStatus.prototype.getState = function() {
  return /** @type{?proto.penumbra.stake.ValidatorState} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.ValidatorState, 2));
};


/**
 * @param {?proto.penumbra.stake.ValidatorState|undefined} value
 * @return {!proto.penumbra.stake.ValidatorStatus} returns this
*/
proto.penumbra.stake.ValidatorStatus.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.ValidatorStatus} returns this
 */
proto.penumbra.stake.ValidatorStatus.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.ValidatorStatus.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 voting_power = 3;
 * @return {number}
 */
proto.penumbra.stake.ValidatorStatus.prototype.getVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.ValidatorStatus} returns this
 */
proto.penumbra.stake.ValidatorStatus.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional BondingState bonding_state = 4;
 * @return {?proto.penumbra.stake.BondingState}
 */
proto.penumbra.stake.ValidatorStatus.prototype.getBondingState = function() {
  return /** @type{?proto.penumbra.stake.BondingState} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.BondingState, 4));
};


/**
 * @param {?proto.penumbra.stake.BondingState|undefined} value
 * @return {!proto.penumbra.stake.ValidatorStatus} returns this
*/
proto.penumbra.stake.ValidatorStatus.prototype.setBondingState = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.ValidatorStatus} returns this
 */
proto.penumbra.stake.ValidatorStatus.prototype.clearBondingState = function() {
  return this.setBondingState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.ValidatorStatus.prototype.hasBondingState = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.BondingState.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.BondingState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.BondingState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.BondingState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unbondingEpoch: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.BondingState}
 */
proto.penumbra.stake.BondingState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.BondingState;
  return proto.penumbra.stake.BondingState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.BondingState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.BondingState}
 */
proto.penumbra.stake.BondingState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.penumbra.stake.BondingState.BondingStateEnum} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnbondingEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.BondingState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.BondingState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.BondingState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.BondingState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.penumbra.stake.BondingState.BondingStateEnum = {
  BONDED: 0,
  UNBONDING: 1,
  UNBONDED: 2
};

/**
 * optional BondingStateEnum state = 1;
 * @return {!proto.penumbra.stake.BondingState.BondingStateEnum}
 */
proto.penumbra.stake.BondingState.prototype.getState = function() {
  return /** @type {!proto.penumbra.stake.BondingState.BondingStateEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.penumbra.stake.BondingState.BondingStateEnum} value
 * @return {!proto.penumbra.stake.BondingState} returns this
 */
proto.penumbra.stake.BondingState.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 unbonding_epoch = 2;
 * @return {number}
 */
proto.penumbra.stake.BondingState.prototype.getUnbondingEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.BondingState} returns this
 */
proto.penumbra.stake.BondingState.prototype.setUnbondingEpoch = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.penumbra.stake.BondingState} returns this
 */
proto.penumbra.stake.BondingState.prototype.clearUnbondingEpoch = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.BondingState.prototype.hasUnbondingEpoch = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.ValidatorState.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.ValidatorState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.ValidatorState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.ValidatorState}
 */
proto.penumbra.stake.ValidatorState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.ValidatorState;
  return proto.penumbra.stake.ValidatorState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.ValidatorState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.ValidatorState}
 */
proto.penumbra.stake.ValidatorState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.penumbra.stake.ValidatorState.ValidatorStateEnum} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.ValidatorState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.ValidatorState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.ValidatorState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.penumbra.stake.ValidatorState.ValidatorStateEnum = {
  INACTIVE: 0,
  ACTIVE: 1,
  JAILED: 2,
  TOMBSTONED: 3,
  DISABLED: 4
};

/**
 * optional ValidatorStateEnum state = 1;
 * @return {!proto.penumbra.stake.ValidatorState.ValidatorStateEnum}
 */
proto.penumbra.stake.ValidatorState.prototype.getState = function() {
  return /** @type {!proto.penumbra.stake.ValidatorState.ValidatorStateEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.penumbra.stake.ValidatorState.ValidatorStateEnum} value
 * @return {!proto.penumbra.stake.ValidatorState} returns this
 */
proto.penumbra.stake.ValidatorState.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.ValidatorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.ValidatorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.ValidatorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: (f = msg.getValidator()) && proto.penumbra.stake.Validator.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.penumbra.stake.ValidatorStatus.toObject(includeInstance, f),
    rateData: (f = msg.getRateData()) && proto.penumbra.stake.RateData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.ValidatorInfo}
 */
proto.penumbra.stake.ValidatorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.ValidatorInfo;
  return proto.penumbra.stake.ValidatorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.ValidatorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.ValidatorInfo}
 */
proto.penumbra.stake.ValidatorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.stake.Validator;
      reader.readMessage(value,proto.penumbra.stake.Validator.deserializeBinaryFromReader);
      msg.setValidator(value);
      break;
    case 2:
      var value = new proto.penumbra.stake.ValidatorStatus;
      reader.readMessage(value,proto.penumbra.stake.ValidatorStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.penumbra.stake.RateData;
      reader.readMessage(value,proto.penumbra.stake.RateData.deserializeBinaryFromReader);
      msg.setRateData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.ValidatorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.ValidatorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.ValidatorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.stake.Validator.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.stake.ValidatorStatus.serializeBinaryToWriter
    );
  }
  f = message.getRateData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.penumbra.stake.RateData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Validator validator = 1;
 * @return {?proto.penumbra.stake.Validator}
 */
proto.penumbra.stake.ValidatorInfo.prototype.getValidator = function() {
  return /** @type{?proto.penumbra.stake.Validator} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.Validator, 1));
};


/**
 * @param {?proto.penumbra.stake.Validator|undefined} value
 * @return {!proto.penumbra.stake.ValidatorInfo} returns this
*/
proto.penumbra.stake.ValidatorInfo.prototype.setValidator = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.ValidatorInfo} returns this
 */
proto.penumbra.stake.ValidatorInfo.prototype.clearValidator = function() {
  return this.setValidator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.ValidatorInfo.prototype.hasValidator = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ValidatorStatus status = 2;
 * @return {?proto.penumbra.stake.ValidatorStatus}
 */
proto.penumbra.stake.ValidatorInfo.prototype.getStatus = function() {
  return /** @type{?proto.penumbra.stake.ValidatorStatus} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.ValidatorStatus, 2));
};


/**
 * @param {?proto.penumbra.stake.ValidatorStatus|undefined} value
 * @return {!proto.penumbra.stake.ValidatorInfo} returns this
*/
proto.penumbra.stake.ValidatorInfo.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.ValidatorInfo} returns this
 */
proto.penumbra.stake.ValidatorInfo.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.ValidatorInfo.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RateData rate_data = 3;
 * @return {?proto.penumbra.stake.RateData}
 */
proto.penumbra.stake.ValidatorInfo.prototype.getRateData = function() {
  return /** @type{?proto.penumbra.stake.RateData} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.RateData, 3));
};


/**
 * @param {?proto.penumbra.stake.RateData|undefined} value
 * @return {!proto.penumbra.stake.ValidatorInfo} returns this
*/
proto.penumbra.stake.ValidatorInfo.prototype.setRateData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.ValidatorInfo} returns this
 */
proto.penumbra.stake.ValidatorInfo.prototype.clearRateData = function() {
  return this.setRateData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.ValidatorInfo.prototype.hasRateData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.ValidatorDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.ValidatorDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.ValidatorDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: (f = msg.getValidator()) && proto.penumbra.stake.Validator.toObject(includeInstance, f),
    authSig: msg.getAuthSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.ValidatorDefinition}
 */
proto.penumbra.stake.ValidatorDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.ValidatorDefinition;
  return proto.penumbra.stake.ValidatorDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.ValidatorDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.ValidatorDefinition}
 */
proto.penumbra.stake.ValidatorDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.stake.Validator;
      reader.readMessage(value,proto.penumbra.stake.Validator.deserializeBinaryFromReader);
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.ValidatorDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.ValidatorDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.ValidatorDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.ValidatorDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.stake.Validator.serializeBinaryToWriter
    );
  }
  f = message.getAuthSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Validator validator = 1;
 * @return {?proto.penumbra.stake.Validator}
 */
proto.penumbra.stake.ValidatorDefinition.prototype.getValidator = function() {
  return /** @type{?proto.penumbra.stake.Validator} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.Validator, 1));
};


/**
 * @param {?proto.penumbra.stake.Validator|undefined} value
 * @return {!proto.penumbra.stake.ValidatorDefinition} returns this
*/
proto.penumbra.stake.ValidatorDefinition.prototype.setValidator = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.ValidatorDefinition} returns this
 */
proto.penumbra.stake.ValidatorDefinition.prototype.clearValidator = function() {
  return this.setValidator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.ValidatorDefinition.prototype.hasValidator = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes auth_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.stake.ValidatorDefinition.prototype.getAuthSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes auth_sig = 2;
 * This is a type-conversion wrapper around `getAuthSig()`
 * @return {string}
 */
proto.penumbra.stake.ValidatorDefinition.prototype.getAuthSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthSig()));
};


/**
 * optional bytes auth_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthSig()`
 * @return {!Uint8Array}
 */
proto.penumbra.stake.ValidatorDefinition.prototype.getAuthSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.stake.ValidatorDefinition} returns this
 */
proto.penumbra.stake.ValidatorDefinition.prototype.setAuthSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.Delegate.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.Delegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.Delegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.Delegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorIdentity: (f = msg.getValidatorIdentity()) && src_proto_crypto_pb.IdentityKey.toObject(includeInstance, f),
    epochIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    unbondedAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    delegationAmount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.Delegate}
 */
proto.penumbra.stake.Delegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.Delegate;
  return proto.penumbra.stake.Delegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.Delegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.Delegate}
 */
proto.penumbra.stake.Delegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_proto_crypto_pb.IdentityKey;
      reader.readMessage(value,src_proto_crypto_pb.IdentityKey.deserializeBinaryFromReader);
      msg.setValidatorIdentity(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnbondedAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelegationAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.Delegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.Delegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.Delegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.Delegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorIdentity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_proto_crypto_pb.IdentityKey.serializeBinaryToWriter
    );
  }
  f = message.getEpochIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUnbondedAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDelegationAmount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional penumbra.crypto.IdentityKey validator_identity = 1;
 * @return {?proto.penumbra.crypto.IdentityKey}
 */
proto.penumbra.stake.Delegate.prototype.getValidatorIdentity = function() {
  return /** @type{?proto.penumbra.crypto.IdentityKey} */ (
    jspb.Message.getWrapperField(this, src_proto_crypto_pb.IdentityKey, 1));
};


/**
 * @param {?proto.penumbra.crypto.IdentityKey|undefined} value
 * @return {!proto.penumbra.stake.Delegate} returns this
*/
proto.penumbra.stake.Delegate.prototype.setValidatorIdentity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.Delegate} returns this
 */
proto.penumbra.stake.Delegate.prototype.clearValidatorIdentity = function() {
  return this.setValidatorIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.Delegate.prototype.hasValidatorIdentity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 epoch_index = 2;
 * @return {number}
 */
proto.penumbra.stake.Delegate.prototype.getEpochIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.Delegate} returns this
 */
proto.penumbra.stake.Delegate.prototype.setEpochIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 unbonded_amount = 3;
 * @return {number}
 */
proto.penumbra.stake.Delegate.prototype.getUnbondedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.Delegate} returns this
 */
proto.penumbra.stake.Delegate.prototype.setUnbondedAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 delegation_amount = 4;
 * @return {number}
 */
proto.penumbra.stake.Delegate.prototype.getDelegationAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.Delegate} returns this
 */
proto.penumbra.stake.Delegate.prototype.setDelegationAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.Undelegate.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.Undelegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.Undelegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.Undelegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorIdentity: (f = msg.getValidatorIdentity()) && src_proto_crypto_pb.IdentityKey.toObject(includeInstance, f),
    epochIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    unbondedAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    delegationAmount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.Undelegate}
 */
proto.penumbra.stake.Undelegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.Undelegate;
  return proto.penumbra.stake.Undelegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.Undelegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.Undelegate}
 */
proto.penumbra.stake.Undelegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_proto_crypto_pb.IdentityKey;
      reader.readMessage(value,src_proto_crypto_pb.IdentityKey.deserializeBinaryFromReader);
      msg.setValidatorIdentity(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnbondedAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelegationAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.Undelegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.Undelegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.Undelegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.Undelegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorIdentity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_proto_crypto_pb.IdentityKey.serializeBinaryToWriter
    );
  }
  f = message.getEpochIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUnbondedAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDelegationAmount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional penumbra.crypto.IdentityKey validator_identity = 1;
 * @return {?proto.penumbra.crypto.IdentityKey}
 */
proto.penumbra.stake.Undelegate.prototype.getValidatorIdentity = function() {
  return /** @type{?proto.penumbra.crypto.IdentityKey} */ (
    jspb.Message.getWrapperField(this, src_proto_crypto_pb.IdentityKey, 1));
};


/**
 * @param {?proto.penumbra.crypto.IdentityKey|undefined} value
 * @return {!proto.penumbra.stake.Undelegate} returns this
*/
proto.penumbra.stake.Undelegate.prototype.setValidatorIdentity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.Undelegate} returns this
 */
proto.penumbra.stake.Undelegate.prototype.clearValidatorIdentity = function() {
  return this.setValidatorIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.Undelegate.prototype.hasValidatorIdentity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 epoch_index = 2;
 * @return {number}
 */
proto.penumbra.stake.Undelegate.prototype.getEpochIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.Undelegate} returns this
 */
proto.penumbra.stake.Undelegate.prototype.setEpochIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 unbonded_amount = 3;
 * @return {number}
 */
proto.penumbra.stake.Undelegate.prototype.getUnbondedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.Undelegate} returns this
 */
proto.penumbra.stake.Undelegate.prototype.setUnbondedAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 delegation_amount = 4;
 * @return {number}
 */
proto.penumbra.stake.Undelegate.prototype.getDelegationAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.Undelegate} returns this
 */
proto.penumbra.stake.Undelegate.prototype.setDelegationAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.CommissionAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.CommissionAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.CommissionAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.CommissionAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    destination: (f = msg.getDestination()) && src_proto_crypto_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.CommissionAmount}
 */
proto.penumbra.stake.CommissionAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.CommissionAmount;
  return proto.penumbra.stake.CommissionAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.CommissionAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.CommissionAmount}
 */
proto.penumbra.stake.CommissionAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 2:
      var value = new src_proto_crypto_pb.Address;
      reader.readMessage(value,src_proto_crypto_pb.Address.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.CommissionAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.CommissionAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.CommissionAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.CommissionAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      src_proto_crypto_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.penumbra.stake.CommissionAmount.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.CommissionAmount} returns this
 */
proto.penumbra.stake.CommissionAmount.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional penumbra.crypto.Address destination = 2;
 * @return {?proto.penumbra.crypto.Address}
 */
proto.penumbra.stake.CommissionAmount.prototype.getDestination = function() {
  return /** @type{?proto.penumbra.crypto.Address} */ (
    jspb.Message.getWrapperField(this, src_proto_crypto_pb.Address, 2));
};


/**
 * @param {?proto.penumbra.crypto.Address|undefined} value
 * @return {!proto.penumbra.stake.CommissionAmount} returns this
*/
proto.penumbra.stake.CommissionAmount.prototype.setDestination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.stake.CommissionAmount} returns this
 */
proto.penumbra.stake.CommissionAmount.prototype.clearDestination = function() {
  return this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.stake.CommissionAmount.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.stake.CommissionAmounts.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.CommissionAmounts.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.CommissionAmounts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.CommissionAmounts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.CommissionAmounts.toObject = function(includeInstance, msg) {
  var f, obj = {
    notesList: jspb.Message.toObjectList(msg.getNotesList(),
    proto.penumbra.stake.CommissionAmount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.CommissionAmounts}
 */
proto.penumbra.stake.CommissionAmounts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.CommissionAmounts;
  return proto.penumbra.stake.CommissionAmounts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.CommissionAmounts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.CommissionAmounts}
 */
proto.penumbra.stake.CommissionAmounts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.stake.CommissionAmount;
      reader.readMessage(value,proto.penumbra.stake.CommissionAmount.deserializeBinaryFromReader);
      msg.addNotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.CommissionAmounts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.CommissionAmounts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.CommissionAmounts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.CommissionAmounts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.penumbra.stake.CommissionAmount.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CommissionAmount notes = 1;
 * @return {!Array<!proto.penumbra.stake.CommissionAmount>}
 */
proto.penumbra.stake.CommissionAmounts.prototype.getNotesList = function() {
  return /** @type{!Array<!proto.penumbra.stake.CommissionAmount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.stake.CommissionAmount, 1));
};


/**
 * @param {!Array<!proto.penumbra.stake.CommissionAmount>} value
 * @return {!proto.penumbra.stake.CommissionAmounts} returns this
*/
proto.penumbra.stake.CommissionAmounts.prototype.setNotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.penumbra.stake.CommissionAmount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.stake.CommissionAmount}
 */
proto.penumbra.stake.CommissionAmounts.prototype.addNotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.penumbra.stake.CommissionAmount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.stake.CommissionAmounts} returns this
 */
proto.penumbra.stake.CommissionAmounts.prototype.clearNotesList = function() {
  return this.setNotesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.stake.DelegationChanges.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.DelegationChanges.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.DelegationChanges.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.DelegationChanges} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.DelegationChanges.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegationsList: jspb.Message.toObjectList(msg.getDelegationsList(),
    proto.penumbra.stake.Delegate.toObject, includeInstance),
    undelegationsList: jspb.Message.toObjectList(msg.getUndelegationsList(),
    proto.penumbra.stake.Undelegate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.DelegationChanges}
 */
proto.penumbra.stake.DelegationChanges.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.DelegationChanges;
  return proto.penumbra.stake.DelegationChanges.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.DelegationChanges} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.DelegationChanges}
 */
proto.penumbra.stake.DelegationChanges.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.stake.Delegate;
      reader.readMessage(value,proto.penumbra.stake.Delegate.deserializeBinaryFromReader);
      msg.addDelegations(value);
      break;
    case 2:
      var value = new proto.penumbra.stake.Undelegate;
      reader.readMessage(value,proto.penumbra.stake.Undelegate.deserializeBinaryFromReader);
      msg.addUndelegations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.DelegationChanges.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.DelegationChanges.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.DelegationChanges} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.DelegationChanges.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelegationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.penumbra.stake.Delegate.serializeBinaryToWriter
    );
  }
  f = message.getUndelegationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.penumbra.stake.Undelegate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Delegate delegations = 1;
 * @return {!Array<!proto.penumbra.stake.Delegate>}
 */
proto.penumbra.stake.DelegationChanges.prototype.getDelegationsList = function() {
  return /** @type{!Array<!proto.penumbra.stake.Delegate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.stake.Delegate, 1));
};


/**
 * @param {!Array<!proto.penumbra.stake.Delegate>} value
 * @return {!proto.penumbra.stake.DelegationChanges} returns this
*/
proto.penumbra.stake.DelegationChanges.prototype.setDelegationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.penumbra.stake.Delegate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.stake.Delegate}
 */
proto.penumbra.stake.DelegationChanges.prototype.addDelegations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.penumbra.stake.Delegate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.stake.DelegationChanges} returns this
 */
proto.penumbra.stake.DelegationChanges.prototype.clearDelegationsList = function() {
  return this.setDelegationsList([]);
};


/**
 * repeated Undelegate undelegations = 2;
 * @return {!Array<!proto.penumbra.stake.Undelegate>}
 */
proto.penumbra.stake.DelegationChanges.prototype.getUndelegationsList = function() {
  return /** @type{!Array<!proto.penumbra.stake.Undelegate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.stake.Undelegate, 2));
};


/**
 * @param {!Array<!proto.penumbra.stake.Undelegate>} value
 * @return {!proto.penumbra.stake.DelegationChanges} returns this
*/
proto.penumbra.stake.DelegationChanges.prototype.setUndelegationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.penumbra.stake.Undelegate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.stake.Undelegate}
 */
proto.penumbra.stake.DelegationChanges.prototype.addUndelegations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.penumbra.stake.Undelegate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.stake.DelegationChanges} returns this
 */
proto.penumbra.stake.DelegationChanges.prototype.clearUndelegationsList = function() {
  return this.setUndelegationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.Uptime.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.Uptime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.Uptime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.Uptime.toObject = function(includeInstance, msg) {
  var f, obj = {
    asOfBlockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    windowLen: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bitvec: msg.getBitvec_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.Uptime}
 */
proto.penumbra.stake.Uptime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.Uptime;
  return proto.penumbra.stake.Uptime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.Uptime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.Uptime}
 */
proto.penumbra.stake.Uptime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAsOfBlockHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWindowLen(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBitvec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.Uptime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.Uptime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.Uptime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.Uptime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsOfBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWindowLen();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBitvec_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 as_of_block_height = 1;
 * @return {number}
 */
proto.penumbra.stake.Uptime.prototype.getAsOfBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.Uptime} returns this
 */
proto.penumbra.stake.Uptime.prototype.setAsOfBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 window_len = 2;
 * @return {number}
 */
proto.penumbra.stake.Uptime.prototype.getWindowLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.stake.Uptime} returns this
 */
proto.penumbra.stake.Uptime.prototype.setWindowLen = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes bitvec = 3;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.stake.Uptime.prototype.getBitvec = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes bitvec = 3;
 * This is a type-conversion wrapper around `getBitvec()`
 * @return {string}
 */
proto.penumbra.stake.Uptime.prototype.getBitvec_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBitvec()));
};


/**
 * optional bytes bitvec = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBitvec()`
 * @return {!Uint8Array}
 */
proto.penumbra.stake.Uptime.prototype.getBitvec_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBitvec()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.stake.Uptime} returns this
 */
proto.penumbra.stake.Uptime.prototype.setBitvec = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.stake.CurrentConsensusKeys.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.stake.CurrentConsensusKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.stake.CurrentConsensusKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.stake.CurrentConsensusKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.CurrentConsensusKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    consensusKeysList: jspb.Message.toObjectList(msg.getConsensusKeysList(),
    src_proto_crypto_pb.ConsensusKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.stake.CurrentConsensusKeys}
 */
proto.penumbra.stake.CurrentConsensusKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.stake.CurrentConsensusKeys;
  return proto.penumbra.stake.CurrentConsensusKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.stake.CurrentConsensusKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.stake.CurrentConsensusKeys}
 */
proto.penumbra.stake.CurrentConsensusKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_proto_crypto_pb.ConsensusKey;
      reader.readMessage(value,src_proto_crypto_pb.ConsensusKey.deserializeBinaryFromReader);
      msg.addConsensusKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.stake.CurrentConsensusKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.stake.CurrentConsensusKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.stake.CurrentConsensusKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.stake.CurrentConsensusKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsensusKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      src_proto_crypto_pb.ConsensusKey.serializeBinaryToWriter
    );
  }
};


/**
 * repeated penumbra.crypto.ConsensusKey consensus_keys = 1;
 * @return {!Array<!proto.penumbra.crypto.ConsensusKey>}
 */
proto.penumbra.stake.CurrentConsensusKeys.prototype.getConsensusKeysList = function() {
  return /** @type{!Array<!proto.penumbra.crypto.ConsensusKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, src_proto_crypto_pb.ConsensusKey, 1));
};


/**
 * @param {!Array<!proto.penumbra.crypto.ConsensusKey>} value
 * @return {!proto.penumbra.stake.CurrentConsensusKeys} returns this
*/
proto.penumbra.stake.CurrentConsensusKeys.prototype.setConsensusKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.penumbra.crypto.ConsensusKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.crypto.ConsensusKey}
 */
proto.penumbra.stake.CurrentConsensusKeys.prototype.addConsensusKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.penumbra.crypto.ConsensusKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.stake.CurrentConsensusKeys} returns this
 */
proto.penumbra.stake.CurrentConsensusKeys.prototype.clearConsensusKeysList = function() {
  return this.setConsensusKeysList([]);
};


goog.object.extend(exports, proto.penumbra.stake);
